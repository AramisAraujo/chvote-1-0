/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 03 17:58:24 GMT 2018
 */

package ch.ge.ve.commons.fileutils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.ge.ve.commons.fileutils.OutputFilesPattern;
import java.nio.file.Path;
import java.time.Clock;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Optional;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFilesPattern_ESTest extends OutputFilesPattern_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(clock0);
      String string0 = outputFilesPattern0.injectParams("{date}", zonedDateTime0, "UNxdV;Vx\"&?nYb", "Vrx", "Vrx");
      assertEquals("20140214", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      Instant instant0 = MockInstant.ofEpochSecond((-398L), 1L);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      ZonedDateTime zonedDateTime0 = MockInstant.atZone(instant0, zoneOffset0);
      String string0 = outputFilesPattern0.injectParams("{operationCode}", zonedDateTime0, "yyyy-MM-dd-HH'h'mm'm'ss's'", "{user}", "{operationCode}");
      assertEquals("yyyy-MM-dd-HH'h'mm'm'ss's'", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      ZoneId zoneId0 = ZoneId.systemDefault();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(zoneId0);
      String string0 = outputFilesPattern0.injectParams("", zonedDateTime0, "", "", "JI7b>W");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      String string0 = outputFilesPattern0.injectParams("", zonedDateTime0, "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now((ZoneId) zoneOffset0);
      String string0 = outputFilesPattern0.injectParams("<fpbeT@J84rrN{>-Nn", zonedDateTime0, "?Sz1&w~U");
      assertEquals("<fpbeT@J84rrN{>-Nn", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now((ZoneId) zoneOffset0);
      String string0 = outputFilesPattern0.injectParams("", zonedDateTime0, "5{\"7]{1K./n:-/PH");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      Clock clock0 = MockClock.systemDefaultZone();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(clock0);
      String string0 = outputFilesPattern0.injectParams("", zonedDateTime0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      Clock clock0 = MockClock.system(zoneOffset0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(clock0);
      String string0 = outputFilesPattern0.injectParams("", "", zonedDateTime0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      Clock clock0 = MockClock.system(zoneOffset0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(clock0);
      String string0 = outputFilesPattern0.injectParams("", "Pt2(RH}@", zonedDateTime0, "_iS<", "Pt2(RH}@");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      ZoneId zoneId0 = ZoneId.systemDefault();
      Clock clock0 = MockClock.tickSeconds(zoneId0);
      Instant instant0 = MockInstant.now(clock0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofInstant(instant0, zoneId0);
      String string0 = outputFilesPattern0.injectParams(": G6*1R|$", ": G6*1R|$", zonedDateTime0, ": G6*1R|$");
      assertEquals(": G6*1R|$", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      Clock clock0 = MockClock.systemDefaultZone();
      Instant instant0 = MockInstant.now(clock0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      ZonedDateTime zonedDateTime0 = MockInstant.atZone(instant0, zoneOffset0);
      String string0 = outputFilesPattern0.injectParams(" 4Aoab#~RBF-kF", "", zonedDateTime0);
      assertEquals(" 4Aoab#~RBF-kF", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      Instant instant0 = MockInstant.ofEpochSecond((-189L), (-2506L));
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(1);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofInstant(instant0, (ZoneId) zoneOffset0);
      String string0 = outputFilesPattern0.injectParams("", "", zonedDateTime0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      // Undeclared exception!
      try { 
        outputFilesPattern0.injectParams("user.name", (ZonedDateTime) null, "(_m?(9", "{canton}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      // Undeclared exception!
      try { 
        outputFilesPattern0.injectParams("`%RV1", (ZonedDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      // Undeclared exception!
      try { 
        outputFilesPattern0.injectParams((String) null, "", zonedDateTime0, "ch.ge.ve.commons.fileutils.FileOperationRuntimeException", "ch.ge.ve.commons.fileutils.FileOperationRuntimeException", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.ge.ve.commons.fileutils.OutputFilesPattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      // Undeclared exception!
      try { 
        outputFilesPattern0.injectParams("O#?4wc`c%5o4_", "", (ZonedDateTime) null, "", "O#?4wc`c%5o4_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      Clock clock0 = MockClock.systemUTC();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(clock0);
      // Undeclared exception!
      try { 
        outputFilesPattern0.injectParams("#S]I~`", "6ER6FiDixW Q:J7", zonedDateTime0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      Pattern pattern0 = Pattern.compile("yyyyMMdd");
      MockFile mockFile0 = new MockFile("yyyyMMdd", "yyyyMMdd");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        outputFilesPattern0.findFirstFileByPattern(pattern0, path0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot walk file tree
         //
         verifyException("ch.ge.ve.commons.fileutils.OutputFilesPattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      Pattern pattern0 = Pattern.compile("ch.ge.ve.commons.fileutils.FileOperationRuntimeException", 1393);
      // Undeclared exception!
      try { 
        outputFilesPattern0.findFirstFileByPattern(pattern0, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      Instant instant0 = MockInstant.ofEpochSecond((-189L), (-2506L));
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(1);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofInstant(instant0, (ZoneId) zoneOffset0);
      String string0 = outputFilesPattern0.injectParams("v&{{W]?)!FU", "Cannot walk file tree", zonedDateTime0, "", "Cannot walk file tree", "");
      assertEquals("v&{{W]?)!FU", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      Instant instant0 = MockInstant.ofEpochSecond((-189L), (-2506L));
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(1);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofInstant(instant0, (ZoneId) zoneOffset0);
      String string0 = outputFilesPattern0.injectParams("Cannot walk file tree", "", zonedDateTime0, "", "Cannot walk file tree");
      assertEquals("Cannot walk file tree", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      Instant instant0 = MockInstant.ofEpochSecond((-189L), (-2506L));
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(1);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofInstant(instant0, (ZoneId) zoneOffset0);
      String string0 = outputFilesPattern0.injectParams("", "Cannot walk file tree", zonedDateTime0, "Cannot walk file tree");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        outputFilesPattern0.injectParams("", (String) null, zonedDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      // Undeclared exception!
      try { 
        outputFilesPattern0.findFirstFileByPattern((Pattern) null, path0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.ge.ve.commons.fileutils.OutputFilesPattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      Pattern pattern0 = Pattern.compile("", 14);
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      Optional<Path> optional0 = outputFilesPattern0.findFirstFileByPattern(pattern0, path0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      String string0 = outputFilesPattern0.injectParams("yyyyMMdd", zonedDateTime0, "yyyy-MM-dd-HH'h'mm'm'ss's'", "yyyyMMdd");
      assertEquals("yyyyMMdd", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      String string0 = outputFilesPattern0.injectParams("yyyy-MM-dd-HH'h'mm'm'ss's'", zonedDateTime0);
      assertEquals("yyyy-MM-dd-HH'h'mm'm'ss's'", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      // Undeclared exception!
      try { 
        outputFilesPattern0.injectParams("", (ZonedDateTime) null, "^}?6O~)MquI=X_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFilesPattern outputFilesPattern0 = new OutputFilesPattern();
      Instant instant0 = MockInstant.ofEpochSecond((-1L), (-1L));
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofStrict(localDateTime0, zoneOffset0, zoneOffset0);
      // Undeclared exception!
      try { 
        outputFilesPattern0.injectParams((String) null, zonedDateTime0, "", "aB.1,", "aB.1,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.ge.ve.commons.fileutils.OutputFilesPattern", e);
      }
  }
}
