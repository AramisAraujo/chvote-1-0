/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 03 18:01:38 GMT 2018
 */

package ch.ge.ve.commons.crypto.ballot;

import org.junit.Test;
import static org.junit.Assert.*;
import ch.ge.ve.commons.crypto.ballot.EncryptedBallotAndWrappedKey;
import javax.crypto.SealedObject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EncryptedBallotAndWrappedKey_ESTest extends EncryptedBallotAndWrappedKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EncryptedBallotAndWrappedKey encryptedBallotAndWrappedKey0 = new EncryptedBallotAndWrappedKey((SealedObject) null, (byte[]) null);
      byte[] byteArray0 = encryptedBallotAndWrappedKey0.getWrappedKey();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      EncryptedBallotAndWrappedKey encryptedBallotAndWrappedKey0 = new EncryptedBallotAndWrappedKey((SealedObject) null, byteArray0);
      byte[] byteArray1 = encryptedBallotAndWrappedKey0.getWrappedKey();
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      EncryptedBallotAndWrappedKey encryptedBallotAndWrappedKey0 = new EncryptedBallotAndWrappedKey((SealedObject) null, byteArray0);
      SealedObject sealedObject0 = encryptedBallotAndWrappedKey0.getEncryptedBallot();
      assertNull(sealedObject0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      EncryptedBallotAndWrappedKey encryptedBallotAndWrappedKey0 = new EncryptedBallotAndWrappedKey((SealedObject) null, byteArray0);
      byte[] byteArray1 = encryptedBallotAndWrappedKey0.getWrappedKey();
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
  }
}
